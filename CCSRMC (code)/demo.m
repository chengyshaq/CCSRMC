warning off %#ok<WNOFF>
clear all
clc

addpath(genpath('.'));%Generate target path
starttime = datestr(now,0);%Running time

load 'data/emotions.mat';

if exist('train_targets','var')==1&&exist('test_targets','var')==1%Whether it exists. If it does not exist, it returns 0 and if it exists, it returns -2
    test_target=test_targets';
    train_target=train_targets';
    clear train_targets test_targets
end 

train_target(train_target==-1)=0;%Train_ - 1 in target becomes 0? 0 means there is no label
test_target(test_target==-1)=0;
%% Optimization Parameters
optmParameter.alpha   = 2^10;  
optmParameter.beta    = 2^0; 
optmParameter.gamma   = 2^-10;  
optmParameter.theta   = 1;
optmParameter.maxIter           = 30;
optmParameter.minimumLossMargin = 10^-5;

optmParameter.maxrho  = 10^10;
optmParameter.rho     = 10^-6;
optmParameter.p       = 1.1;

optmParameter.searchPara = 0; % Indicates whether the parameter is adjusted, {0:not,1:yes}
optmParameter.tuneParaOneTime = 1; % Indicates that the parameter is adjusted once or in each fold. {0: fold each time, 1: only once}
% For large datasets, the search range of alpha and beta should be set to a large value

optmParameter.alpha_searchrange = 2.^[-10:0]; 
optmParameter.beta_searchrange  = 2.^[-5:0];
optmParameter.gamma_searchrange = 10.^[-1:-1];
% optmParameter.theta_searchrange = 10.^[-4,-6];

optmParameter.bQuiet            = 1;

%% Model Parameters
modelparameter.crossvalidation    = 1; % {0,1} cross validation
modelparameter.cv_num             = 5;% Number of cross validation
modelparameter.L2Norm             = 1; % {0,1}
modelparameter.deleteData         = 1; % {0,1}

%% Train and Test
if modelparameter.crossvalidation==0 
else
%% cross validation
    if exist('train_data','var')==1
        data=[train_data;test_data];
         target=[train_target,test_target];
        clear train_data test_data train_target test_target
    end
    data     = double(data);
    num_data = size(data,1);
    if modelparameter.L2Norm == 1
        temp_data = data;
        temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        if sum(sum(isnan(temp_data)))>0
            temp_data = data+eps;
            temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        end
    else
        temp_data = data;
    end
    if modelparameter.deleteData
        clear data
    end
    
    randorder = randperm(num_data);
    Result_LSRLSF  = zeros(16,modelparameter.cv_num);

    for j = 1:modelparameter.cv_num
        fprintf('\n Running Fold - %d/%d \n',j,modelparameter.cv_num);

       %% the training and test parts are generated by fixed spliting with the given random order
        [cv_train_data,cv_train_target,cv_test_data,cv_test_target ] = generateCVSet( temp_data,target',randorder,j,modelparameter.cv_num );
        cv_train_target=cv_train_target';
        cv_test_target=cv_test_target';

       %% Tune the parametes
%         if optmParameter.searchPara == 1
%             if (optmParameter.tuneParaOneTime == 1) && (exist('BestResult','var')==0)
%                 fprintf('\n-  parameterization for LSRLSF by cross validation on the training data  -');%Parameterization of lsrlsf based on cross validation of training data
%                 [optmParameter, BestResult ] = LSRLSF_adaptive_validate( cv_train_data, cv_train_target, optmParameter);%Adaptive_ verification
%             elseif (optmParameter.tuneParaOneTime == 0)
%                 fprintf('\n-  parameterization for LSRLSF by cross validation on the training data  -');
%                 [optmParameter, BestResult ] = LSRLSF_adaptive_validate( cv_train_data, cv_train_target, optmParameter);
%             end
%         end
       %% If we don't search the parameters, we will run LSR-LSF with the fixed parametrs
        x=find(cv_train_target==0);
        [model_LSRLSF] = LSRLSF(cv_train_data, cv_train_target', optmParameter);
          Outputs       = cv_test_data*model_LSRLSF.W;
        
        Pre_Labels = sign(Outputs-0.5);
        Pre_Labels(Pre_Labels==-1)=0;

       %% evaluation of LSRLSF 
        Result_LSRLSF(:,j) = EvaluationAll(Pre_Labels',Outputs',cv_test_target);

    end

   %% the average results of LSRLSF 
    Avg_Result = zeros(16,2);
    Avg_Result(:,1)=mean(Result_LSRLSF,2);
    Avg_Result(:,2)=std(Result_LSRLSF,1,2);
    fprintf('\nResults of LSRLSF\n');
    PrintResults(Avg_Result);

end
endtime = datestr(now,0);